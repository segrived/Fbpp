- content_for :title, t('.title')

:coffeescript
  jQuery ->

    check_all_answered = () ->
      ajax_data = []
      for q in $('.question')
        ajax_data.push { qid: $(q).data('question-id'), answer: $(q).data('rating') }
      ajax_data.every (x) -> x.answer?

    highlight_start = (question, rating) ->
      stars = question.find('.rating-star')
      stars.text("☆")
      filled = stars.filter (i) -> $(@).data('rating') <= rating
      filled.text("★")

    # Наведение на звездочку
    $('.rating-star').hover ->
      highlight_start($(@).closest('div.question'), $(@).data('rating'))
    # Щелчёк по звездочке
    $('.rating-star').click ->
      rating = $(@).data('rating')
      question = $(@).closest('div.question')
      $(question).data('rating', rating).addClass('answered')
      if check_all_answered()
        $('.add-comment-checkbox').show('normal')
    # Вывод мышки с области звездочек ;)
    $('.answer').mouseleave ->
      _this = $(@)
      rating = _this.parent('.question').data('rating')
      if rating?
        highlight_start($(@).parent(), rating)
      else
        _this.find('.rating-star').text('☆')
    # Нажатие кнопки "Отправить отзыв"
    $('#send-feedback').click () ->
      ajax_data = []
      for q in $('.question')
        ajax_data.push { qid: $(q).data('question-id'), answer: $(q).data('rating') }
      all_answered = ajax_data.every (x) -> x.answer?
      unless all_answered
        alert("#{t('.not_all_req_questions')}")
        return
      if $('#add_comment').is(':checked')
        feedback_comment = {
          mark: $('#comment_mark').val(),
          body: $('#comment_body').val(),
          anonymously: (! $('#comment_anonymously').is(':checked')),
          lecturer_id: $('#comment_lecturer_id').val()
        }
      $.post "/feedbacks/#{params[:id]}/add",
        answers: $.stringify(ajax_data),
        comment: feedback_comment # отправит null, если комментария нет
        complete: (request, textStatus) ->
          $('.question-list, .block-buttons, .comment-block').hide()
          $('.succ-dialog').show()
    $('#add_comment').bind 'change', () ->
      $('.feedback-comment-form').toggle($(@).is(':checked'))


.block.brd
  = block_title t(".title"), "write.png"
  - if logged_user.student.can_add_feedback(params[:id])
    .block-content
      .succ-dialog.hidden
        %h3= t(".feedback_suc")
        %hr.dashed
        = link_to "← #{t('.to_feedbacks')}", feedback_path(params[:id])
      .question-list
        - @question.each_with_index do |q, i|
          .question[q]{data: {question_id: q.id}}
            .question-text
              %span.strong= t(".question", number: i + 1) << ": "
              = q.text
            .answer
              - (1..5).each do |x|
                %span.rating-star{id: "s_#{x}", data: {rating: x}} ☆
      .comment-block
        .add-comment-checkbox.hidden
          %hr.dashed
          .form-field
            = check_box_tag :add_comment
            = label_tag :add_comment, "Добавить комментарий к отзыву", class: 'inline normal'
        .feedback-comment-form.hidden
          = render partial: 'profiles/blocks/comment_add', locals: {lecturer_id: @subscription.lecturer.id}
    .block-buttons
      %button.btn-green.compact#send-feedback= t(".add_btn")
  - else
    .block-content
      %h2= t('.limit_error_title')
      %p= t('.limit_error_hint')
      - diff = Time.diff(Time.now, Date.tomorrow.to_time)
      %p
        = t(".next_feedback_wait")
        %span.strong= t(".next_feedback_timefrm", hour: diff[:hour], min: diff[:minute])
    .block-buttons
      = link_to "← #{t('.back_link')}", feedback_path(params[:id])